{"cells":[{"cell_type":"code","execution_count":null,"id":"2c3fac5e","metadata":{"id":"2c3fac5e","outputId":"c48c4552-d99a-4bed-dd6f-1dbabfa7f568"},"outputs":[{"name":"stdout","output_type":"stream","text":["Requirement already satisfied: tensorflow in c:\\users\\admin\\anaconda3\\lib\\site-packages (2.15.0)\n","Requirement already satisfied: tensorflow-intel==2.15.0 in c:\\users\\admin\\anaconda3\\lib\\site-packages (from tensorflow) (2.15.0)\n","Requirement already satisfied: absl-py>=1.0.0 in c:\\users\\admin\\anaconda3\\lib\\site-packages (from tensorflow-intel==2.15.0->tensorflow) (2.1.0)\n","Requirement already satisfied: astunparse>=1.6.0 in c:\\users\\admin\\anaconda3\\lib\\site-packages (from tensorflow-intel==2.15.0->tensorflow) (1.6.3)\n","Requirement already satisfied: flatbuffers>=23.5.26 in c:\\users\\admin\\anaconda3\\lib\\site-packages (from tensorflow-intel==2.15.0->tensorflow) (23.5.26)\n","Requirement already satisfied: gast!=0.5.0,!=0.5.1,!=0.5.2,>=0.2.1 in c:\\users\\admin\\anaconda3\\lib\\site-packages (from tensorflow-intel==2.15.0->tensorflow) (0.5.4)\n","Requirement already satisfied: google-pasta>=0.1.1 in c:\\users\\admin\\anaconda3\\lib\\site-packages (from tensorflow-intel==2.15.0->tensorflow) (0.2.0)\n","Requirement already satisfied: h5py>=2.9.0 in c:\\users\\admin\\anaconda3\\lib\\site-packages (from tensorflow-intel==2.15.0->tensorflow) (3.9.0)\n","Requirement already satisfied: libclang>=13.0.0 in c:\\users\\admin\\anaconda3\\lib\\site-packages (from tensorflow-intel==2.15.0->tensorflow) (16.0.6)\n","Requirement already satisfied: ml-dtypes~=0.2.0 in c:\\users\\admin\\anaconda3\\lib\\site-packages (from tensorflow-intel==2.15.0->tensorflow) (0.2.0)\n","Requirement already satisfied: numpy<2.0.0,>=1.23.5 in c:\\users\\admin\\anaconda3\\lib\\site-packages (from tensorflow-intel==2.15.0->tensorflow) (1.24.3)\n","Requirement already satisfied: opt-einsum>=2.3.2 in c:\\users\\admin\\anaconda3\\lib\\site-packages (from tensorflow-intel==2.15.0->tensorflow) (3.3.0)\n","Requirement already satisfied: packaging in c:\\users\\admin\\anaconda3\\lib\\site-packages (from tensorflow-intel==2.15.0->tensorflow) (23.1)\n","Requirement already satisfied: protobuf!=4.21.0,!=4.21.1,!=4.21.2,!=4.21.3,!=4.21.4,!=4.21.5,<5.0.0dev,>=3.20.3 in c:\\users\\admin\\anaconda3\\lib\\site-packages (from tensorflow-intel==2.15.0->tensorflow) (4.25.3)\n","Requirement already satisfied: setuptools in c:\\users\\admin\\anaconda3\\lib\\site-packages (from tensorflow-intel==2.15.0->tensorflow) (68.0.0)\n","Requirement already satisfied: six>=1.12.0 in c:\\users\\admin\\anaconda3\\lib\\site-packages (from tensorflow-intel==2.15.0->tensorflow) (1.16.0)\n","Requirement already satisfied: termcolor>=1.1.0 in c:\\users\\admin\\anaconda3\\lib\\site-packages (from tensorflow-intel==2.15.0->tensorflow) (2.4.0)\n","Requirement already satisfied: typing-extensions>=3.6.6 in c:\\users\\admin\\anaconda3\\lib\\site-packages (from tensorflow-intel==2.15.0->tensorflow) (4.7.1)\n","Requirement already satisfied: wrapt<1.15,>=1.11.0 in c:\\users\\admin\\anaconda3\\lib\\site-packages (from tensorflow-intel==2.15.0->tensorflow) (1.14.1)\n","Requirement already satisfied: tensorflow-io-gcs-filesystem>=0.23.1 in c:\\users\\admin\\anaconda3\\lib\\site-packages (from tensorflow-intel==2.15.0->tensorflow) (0.31.0)\n","Requirement already satisfied: grpcio<2.0,>=1.24.3 in c:\\users\\admin\\anaconda3\\lib\\site-packages (from tensorflow-intel==2.15.0->tensorflow) (1.62.0)\n","Requirement already satisfied: tensorboard<2.16,>=2.15 in c:\\users\\admin\\anaconda3\\lib\\site-packages (from tensorflow-intel==2.15.0->tensorflow) (2.15.2)\n","Requirement already satisfied: tensorflow-estimator<2.16,>=2.15.0 in c:\\users\\admin\\anaconda3\\lib\\site-packages (from tensorflow-intel==2.15.0->tensorflow) (2.15.0)\n","Requirement already satisfied: keras<2.16,>=2.15.0 in c:\\users\\admin\\anaconda3\\lib\\site-packages (from tensorflow-intel==2.15.0->tensorflow) (2.15.0)\n","Requirement already satisfied: wheel<1.0,>=0.23.0 in c:\\users\\admin\\anaconda3\\lib\\site-packages (from astunparse>=1.6.0->tensorflow-intel==2.15.0->tensorflow) (0.38.4)\n","Requirement already satisfied: google-auth<3,>=1.6.3 in c:\\users\\admin\\anaconda3\\lib\\site-packages (from tensorboard<2.16,>=2.15->tensorflow-intel==2.15.0->tensorflow) (2.28.1)\n","Requirement already satisfied: google-auth-oauthlib<2,>=0.5 in c:\\users\\admin\\anaconda3\\lib\\site-packages (from tensorboard<2.16,>=2.15->tensorflow-intel==2.15.0->tensorflow) (1.2.0)\n","Requirement already satisfied: markdown>=2.6.8 in c:\\users\\admin\\anaconda3\\lib\\site-packages (from tensorboard<2.16,>=2.15->tensorflow-intel==2.15.0->tensorflow) (3.4.1)\n","Requirement already satisfied: requests<3,>=2.21.0 in c:\\users\\admin\\anaconda3\\lib\\site-packages (from tensorboard<2.16,>=2.15->tensorflow-intel==2.15.0->tensorflow) (2.31.0)\n","Requirement already satisfied: tensorboard-data-server<0.8.0,>=0.7.0 in c:\\users\\admin\\anaconda3\\lib\\site-packages (from tensorboard<2.16,>=2.15->tensorflow-intel==2.15.0->tensorflow) (0.7.2)\n","Requirement already satisfied: werkzeug>=1.0.1 in c:\\users\\admin\\anaconda3\\lib\\site-packages (from tensorboard<2.16,>=2.15->tensorflow-intel==2.15.0->tensorflow) (2.2.3)\n","Requirement already satisfied: cachetools<6.0,>=2.0.0 in c:\\users\\admin\\anaconda3\\lib\\site-packages (from google-auth<3,>=1.6.3->tensorboard<2.16,>=2.15->tensorflow-intel==2.15.0->tensorflow) (5.3.3)\n","Requirement already satisfied: pyasn1-modules>=0.2.1 in c:\\users\\admin\\anaconda3\\lib\\site-packages (from google-auth<3,>=1.6.3->tensorboard<2.16,>=2.15->tensorflow-intel==2.15.0->tensorflow) (0.2.8)\n","Requirement already satisfied: rsa<5,>=3.1.4 in c:\\users\\admin\\anaconda3\\lib\\site-packages (from google-auth<3,>=1.6.3->tensorboard<2.16,>=2.15->tensorflow-intel==2.15.0->tensorflow) (4.9)\n","Requirement already satisfied: requests-oauthlib>=0.7.0 in c:\\users\\admin\\anaconda3\\lib\\site-packages (from google-auth-oauthlib<2,>=0.5->tensorboard<2.16,>=2.15->tensorflow-intel==2.15.0->tensorflow) (1.3.1)\n","Requirement already satisfied: charset-normalizer<4,>=2 in c:\\users\\admin\\anaconda3\\lib\\site-packages (from requests<3,>=2.21.0->tensorboard<2.16,>=2.15->tensorflow-intel==2.15.0->tensorflow) (2.0.4)\n","Requirement already satisfied: idna<4,>=2.5 in c:\\users\\admin\\anaconda3\\lib\\site-packages (from requests<3,>=2.21.0->tensorboard<2.16,>=2.15->tensorflow-intel==2.15.0->tensorflow) (3.4)\n","Requirement already satisfied: urllib3<3,>=1.21.1 in c:\\users\\admin\\anaconda3\\lib\\site-packages (from requests<3,>=2.21.0->tensorboard<2.16,>=2.15->tensorflow-intel==2.15.0->tensorflow) (1.26.16)\n","Requirement already satisfied: certifi>=2017.4.17 in c:\\users\\admin\\anaconda3\\lib\\site-packages (from requests<3,>=2.21.0->tensorboard<2.16,>=2.15->tensorflow-intel==2.15.0->tensorflow) (2023.7.22)\n","Requirement already satisfied: MarkupSafe>=2.1.1 in c:\\users\\admin\\anaconda3\\lib\\site-packages (from werkzeug>=1.0.1->tensorboard<2.16,>=2.15->tensorflow-intel==2.15.0->tensorflow) (2.1.1)\n","Requirement already satisfied: pyasn1<0.5.0,>=0.4.6 in c:\\users\\admin\\anaconda3\\lib\\site-packages (from pyasn1-modules>=0.2.1->google-auth<3,>=1.6.3->tensorboard<2.16,>=2.15->tensorflow-intel==2.15.0->tensorflow) (0.4.8)\n","Requirement already satisfied: oauthlib>=3.0.0 in c:\\users\\admin\\anaconda3\\lib\\site-packages (from requests-oauthlib>=0.7.0->google-auth-oauthlib<2,>=0.5->tensorboard<2.16,>=2.15->tensorflow-intel==2.15.0->tensorflow) (3.2.2)\n","Note: you may need to restart the kernel to use updated packages.\n"]}],"source":["pip install tensorflow"]},{"cell_type":"code","execution_count":null,"id":"e3e53715","metadata":{"id":"e3e53715","outputId":"925b7ece-8b15-4fd9-d0a1-4f59e271286c"},"outputs":[{"name":"stdout","output_type":"stream","text":["Note: you may need to restart the kernel to use updated packages.\n"]},{"name":"stderr","output_type":"stream","text":["ERROR: Could not find a version that satisfies the requirement tensorflow.keras (from versions: none)\n","ERROR: No matching distribution found for tensorflow.keras\n"]}],"source":["pip install tensorflow.keras"]},{"cell_type":"code","execution_count":null,"id":"b83d291c","metadata":{"id":"b83d291c","outputId":"f477cb0d-1633-440e-93da-68443f16d8e0"},"outputs":[{"name":"stdout","output_type":"stream","text":["Requirement already satisfied: imutils in c:\\users\\admin\\anaconda3\\lib\\site-packages (0.5.4)\n","Note: you may need to restart the kernel to use updated packages.\n"]}],"source":["pip install imutils"]},{"cell_type":"code","execution_count":null,"id":"8e4b215e","metadata":{"id":"8e4b215e","outputId":"a26e0d86-b59a-4f7b-d079-a2612880c4bb"},"outputs":[{"name":"stdout","output_type":"stream","text":["Requirement already satisfied: opencv-python in c:\\users\\admin\\anaconda3\\lib\\site-packages (4.9.0.80)\n","Requirement already satisfied: numpy>=1.21.2 in c:\\users\\admin\\anaconda3\\lib\\site-packages (from opencv-python) (1.24.3)\n"]}],"source":["!pip install opencv-python"]},{"cell_type":"code","execution_count":null,"id":"af4e8ab5","metadata":{"id":"af4e8ab5","outputId":"fa121d34-12b4-45ae-b5d5-b916061f82d7"},"outputs":[{"name":"stdout","output_type":"stream","text":["[INFO] loading images...\n"]},{"name":"stderr","output_type":"stream","text":["C:\\Users\\admin\\anaconda3\\Lib\\site-packages\\PIL\\Image.py:996: UserWarning: Palette images with Transparency expressed in bytes should be converted to RGBA images\n","  warnings.warn(\n"]},{"name":"stdout","output_type":"stream","text":["WARNING:tensorflow:`input_shape` is undefined or non-square, or `rows` is not in [96, 128, 160, 192, 224]. Weights for input shape (224, 224) will be loaded as the default.\n","[INFO] compiling model...\n","[INFO] training head...\n"]},{"name":"stderr","output_type":"stream","text":["C:\\Users\\admin\\anaconda3\\Lib\\site-packages\\keras\\src\\optimizers\\legacy\\adam.py:118: UserWarning: The `lr` argument is deprecated, use `learning_rate` instead.\n","  super().__init__(name, **kwargs)\n"]},{"name":"stdout","output_type":"stream","text":["Epoch 1/20\n","95/95 [==============================] - 97s 911ms/step - loss: 0.4120 - accuracy: 0.8464 - val_loss: 0.1571 - val_accuracy: 0.9804\n","Epoch 2/20\n","95/95 [==============================] - 91s 961ms/step - loss: 0.1483 - accuracy: 0.9654 - val_loss: 0.0836 - val_accuracy: 0.9896\n","Epoch 3/20\n","95/95 [==============================] - 94s 985ms/step - loss: 0.0975 - accuracy: 0.9740 - val_loss: 0.0605 - val_accuracy: 0.9922\n","Epoch 4/20\n","95/95 [==============================] - 97s 1s/step - loss: 0.0760 - accuracy: 0.9825 - val_loss: 0.0493 - val_accuracy: 0.9922\n","Epoch 5/20\n","95/95 [==============================] - 91s 960ms/step - loss: 0.0677 - accuracy: 0.9812 - val_loss: 0.0428 - val_accuracy: 0.9922\n","Epoch 6/20\n","95/95 [==============================] - 90s 944ms/step - loss: 0.0603 - accuracy: 0.9829 - val_loss: 0.0406 - val_accuracy: 0.9922\n","Epoch 7/20\n","95/95 [==============================] - 87s 915ms/step - loss: 0.0579 - accuracy: 0.9848 - val_loss: 0.0375 - val_accuracy: 0.9922\n","Epoch 8/20\n","95/95 [==============================] - 87s 912ms/step - loss: 0.0543 - accuracy: 0.9822 - val_loss: 0.0356 - val_accuracy: 0.9935\n","Epoch 9/20\n","95/95 [==============================] - 89s 935ms/step - loss: 0.0463 - accuracy: 0.9862 - val_loss: 0.0346 - val_accuracy: 0.9922\n","Epoch 10/20\n","95/95 [==============================] - 87s 911ms/step - loss: 0.0429 - accuracy: 0.9868 - val_loss: 0.0323 - val_accuracy: 0.9935\n","Epoch 11/20\n","95/95 [==============================] - 87s 916ms/step - loss: 0.0434 - accuracy: 0.9858 - val_loss: 0.0317 - val_accuracy: 0.9935\n","Epoch 12/20\n","95/95 [==============================] - 87s 920ms/step - loss: 0.0432 - accuracy: 0.9865 - val_loss: 0.0304 - val_accuracy: 0.9935\n","Epoch 13/20\n","95/95 [==============================] - 87s 914ms/step - loss: 0.0339 - accuracy: 0.9888 - val_loss: 0.0365 - val_accuracy: 0.9896\n","Epoch 14/20\n","95/95 [==============================] - 87s 915ms/step - loss: 0.0262 - accuracy: 0.9927 - val_loss: 0.0297 - val_accuracy: 0.9935\n","Epoch 15/20\n","95/95 [==============================] - 87s 911ms/step - loss: 0.0299 - accuracy: 0.9914 - val_loss: 0.0296 - val_accuracy: 0.9935\n","Epoch 16/20\n","95/95 [==============================] - 87s 912ms/step - loss: 0.0309 - accuracy: 0.9914 - val_loss: 0.0287 - val_accuracy: 0.9935\n","Epoch 17/20\n","95/95 [==============================] - 87s 912ms/step - loss: 0.0240 - accuracy: 0.9954 - val_loss: 0.0279 - val_accuracy: 0.9935\n","Epoch 18/20\n","95/95 [==============================] - 87s 912ms/step - loss: 0.0265 - accuracy: 0.9901 - val_loss: 0.0281 - val_accuracy: 0.9922\n","Epoch 19/20\n","95/95 [==============================] - 87s 918ms/step - loss: 0.0260 - accuracy: 0.9941 - val_loss: 0.0272 - val_accuracy: 0.9922\n","Epoch 20/20\n","95/95 [==============================] - 87s 913ms/step - loss: 0.0291 - accuracy: 0.9911 - val_loss: 0.0280 - val_accuracy: 0.9922\n","[INFO] evaluating network...\n","24/24 [==============================] - 14s 550ms/step\n","              precision    recall  f1-score   support\n","\n","   with_mask       0.99      0.99      0.99       383\n","without_mask       0.99      0.99      0.99       384\n","\n","    accuracy                           0.99       767\n","   macro avg       0.99      0.99      0.99       767\n","weighted avg       0.99      0.99      0.99       767\n","\n","[INFO] saving mask detector model...\n"]},{"name":"stderr","output_type":"stream","text":["C:\\Users\\admin\\anaconda3\\Lib\\site-packages\\keras\\src\\engine\\training.py:3103: UserWarning: You are saving your model as an HDF5 file via `model.save()`. This file format is considered legacy. We recommend using instead the native Keras format, e.g. `model.save('my_model.keras')`.\n","  saving_api.save_model(\n"]},{"data":{"image/png":"","text/plain":["<Figure size 640x480 with 1 Axes>"]},"metadata":{},"output_type":"display_data"}],"source":["# import the necessary packages\n","from tensorflow.keras.preprocessing.image import ImageDataGenerator\n","from tensorflow.keras.applications import MobileNetV2\n","from tensorflow.keras.layers import AveragePooling2D\n","from tensorflow.keras.layers import Dropout\n","from tensorflow.keras.layers import Flatten\n","from tensorflow.keras.layers import Dense\n","from tensorflow.keras.layers import Input\n","from tensorflow.keras.models import Model\n","from tensorflow.keras.optimizers import Adam\n","from tensorflow.keras.applications.mobilenet_v2 import preprocess_input\n","from tensorflow.keras.preprocessing.image import img_to_array\n","from tensorflow.keras.preprocessing.image import load_img\n","from tensorflow.keras.utils import to_categorical\n","from sklearn.preprocessing import LabelBinarizer\n","from sklearn.model_selection import train_test_split\n","from sklearn.metrics import classification_report\n","from imutils import paths\n","import matplotlib.pyplot as plt\n","import numpy as np\n","import os\n","import tensorflow as tf\n","\n","\n","# initialize the initial learning rate, number of epochs to train for and batch size\n","INIT_LR = 1e-4\n","EPOCHS = 20\n","BS = 32\n","\n","DIRECTORY = r\"C:\\Users\\admin\\Face-Mask-Detection-master\\Face-Mask-Detection-master\\dataset\"\n","CATEGORIES = [\"with_mask\", \"without_mask\"]\n","\n","# grab the list of images in our dataset directory, then initialize the list of data (i.e., images) and class images\n","print(\"[INFO] loading images...\")\n","\n","data = []\n","labels = []\n","\n","for category in CATEGORIES:\n","    path = os.path.join(DIRECTORY, category)\n","    for img in os.listdir(path):\n","        img_path = os.path.join(path, img)\n","        image= load_img(img_path, target_size=(224, 224))\n","        image = img_to_array(image)\n","        image = preprocess_input(image)\n","\n","        data.append(image)\n","        labels.append(category)\n","\n","# perform one-hot encoding on the labels\n","lb = LabelBinarizer()\n","labels = lb.fit_transform(labels)\n","labels = to_categorical(labels)\n","\n","data = np.array(data, dtype=\"float32\")\n","labels = np.array(labels)\n","\n","(trainX, testX, trainY, testY) = train_test_split(data, labels,test_size=0.20, stratify=labels, random_state=42)\n","\n","# construct the training image generator for data augmentation\n","aug = ImageDataGenerator(rotation_range=20,zoom_range=0.15,width_shift_range=0.2,height_shift_range=0.2,shear_range=0.15,horizontal_flip=True,fill_mode=\"nearest\")\n","\n","# load the MobileNetV2 network, ensuring the head FC layer sets are left off\n","baseModel = MobileNetV2(weights=\"imagenet\", include_top=False,input_tensor=Input(shape=(224, 224, 3)))\n","\n","# construct the head of the model that will be placed on top of the the base model\n","headModel = baseModel.output\n","headModel = AveragePooling2D(pool_size=(7, 7))(headModel)\n","headModel = Flatten(name=\"flatten\")(headModel)\n","headModel = Dense(128, activation=\"relu\")(headModel)\n","headModel = Dropout(0.5)(headModel)\n","headModel = Dense(2, activation=\"softmax\")(headModel)\n","\n","# place the head FC model on top of the base model (this will become the actual model we will train)\n","model = Model(inputs=baseModel.input, outputs=headModel)\n","\n","# loop over all layers in the base model and freeze them so they will *not* be updated during the first training process\n","for layer in baseModel.layers:\n","    layer.trainable = False\n","\n","# compile our model\n","print(\"[INFO] compiling model...\")\n","opt = tf.keras.optimizers.legacy.Adam(lr=INIT_LR, decay=INIT_LR / EPOCHS)\n","model.compile(loss=\"binary_crossentropy\", optimizer=opt,metrics=[\"accuracy\"])\n","\n","# train the head of the network\n","print(\"[INFO] training head...\")\n","H = model.fit(aug.flow(trainX, trainY, batch_size=BS),steps_per_epoch=len(trainX) // BS,validation_data=(testX, testY),validation_steps=len(testX) // BS,epochs=EPOCHS)\n","\n","# make predictions on the testing set\n","print(\"[INFO] evaluating network...\")\n","predIdxs = model.predict(testX, batch_size=BS)\n","\n","# for each image in the testing set we need to find the index of the\n","# label with corresponding largest predicted probability\n","predIdxs = np.argmax(predIdxs, axis=1)\n","\n","# show a nicely formatted classification report\n","print(classification_report(testY.argmax(axis=1), predIdxs,\n","    target_names=lb.classes_))\n","\n","# serialize the model to disk\n","print(\"[INFO] saving mask detector model...\")\n","model.save(\"mask_detector.model\", save_format=\"h5\")\n","\n","# plot the training loss and accuracy\n","N = EPOCHS\n","plt.style.use(\"ggplot\")\n","plt.figure()\n","plt.plot(np.arange(0, N), H.history[\"loss\"], label=\"train_loss\")\n","plt.plot(np.arange(0, N), H.history[\"val_loss\"], label=\"val_loss\")\n","plt.plot(np.arange(0, N), H.history[\"accuracy\"], label=\"train_acc\")\n","plt.plot(np.arange(0, N), H.history[\"val_accuracy\"], label=\"val_acc\")\n","plt.title(\"Training Loss and Accuracy\")\n","plt.xlabel(\"Epoch #\")\n","plt.ylabel(\"Loss/Accuracy\")\n","plt.legend(loc=\"lower left\")\n","plt.savefig(\"plot.png\")\n"]}],"metadata":{"kernelspec":{"display_name":"Python 3 (ipykernel)","language":"python","name":"python3"},"language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.11.5"},"colab":{"provenance":[]}},"nbformat":4,"nbformat_minor":5}